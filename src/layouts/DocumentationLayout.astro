---
import Header from "../components/DocumentationHeader.astro";
import "../styles/global.css";
import "../styles/documentation.css";
const {content, headings} = Astro.props;
const currentPath = new URL(Astro.request.url).pathname;
let next, previous;

const sections = headings.filter((h) => {
    return h.depth > 1;
});

if(currentPath.startsWith("/en")){
    const all = await Astro.glob('../pages/en/*.md');
    next = all.find(e => e.url == content.next)
    previous = all.find(e => e.url == content.previous)
}
else {
    const all = await Astro.glob('../pages/*.md');
    next = all.find(e => e.url == content.next)
    previous = all.find(e => e.url == content.previous)
}

---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="../../src/images/Logo.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{content.title}</title>
</head>
<body>

<Header translationAddress={content.translation}></Header>

<main>
    <span id="sidebar" aria-hidden="true"></span>

    <div class="slot">
        <slot />
        <div id="previous-next">
            {
                previous?.frontmatter?.title && (
                            <a href={content.previous} id="previous">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke="var(--arrow-stroke)" clip-rule="evenodd" d="M11.7071 4.29289C12.0976 4.68342 12.0976 5.31658 11.7071 5.70711L6.41421 11H20C20.5523 11 21 11.4477 21 12C21 12.5523 20.5523 13 20 13H6.41421L11.7071 18.2929C12.0976 18.6834 12.0976 19.3166 11.7071 19.7071C11.3166 20.0976 10.6834 20.0976 10.2929 19.7071L3.29289 12.7071C3.10536 12.5196 3 12.2652 3 12C3 11.7348 3.10536 11.4804 3.29289 11.2929L10.2929 4.29289C10.6834 3.90237 11.3166 3.90237 11.7071 4.29289Z" fill="var(--arrow-fill)"/>
                                </svg>
                                <div>
                                    <p>PREVIOUS</p>
                                    <h3>{previous?.frontmatter?.title}</h3>
                                </div>
                            </a>
                )
            }
            {
                next?.frontmatter?.title && (
                            <a href={content.next} id="next">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke="var(--arrow-stroke)" clip-rule="evenodd" d="M12.2929 4.29289C12.6834 3.90237 13.3166 3.90237 13.7071 4.29289L20.7071 11.2929C21.0976 11.6834 21.0976 12.3166 20.7071 12.7071L13.7071 19.7071C13.3166 20.0976 12.6834 20.0976 12.2929 19.7071C11.9024 19.3166 11.9024 18.6834 12.2929 18.2929L17.5858 13H4C3.44772 13 3 12.5523 3 12C3 11.4477 3.44772 11 4 11H17.5858L12.2929 5.70711C11.9024 5.31658 11.9024 4.68342 12.2929 4.29289Z" fill="var(--arrow-fill)"/>
                                </svg>
                                <div>
                                    <p>NEXT</p>
                                    <h3>{next?.frontmatter?.title}</h3>
                                </div>
                            </a>
                )
            }
        </div>
    </div>

    <aside>
        <nav>
            <h2>On this page</h2>
            <ul>
                {sections.map(heading => (
                        <li>
                            <a
                                href={`#${heading.slug}`}
                                style={{paddingLeft: `${heading.depth}rem`}}
                                data-slug={heading.slug}
                            >
                                {heading.text}
                            </a>
                        </li>
                ))}
            </ul>
        </nav>
    </aside>
</main>

</body>
</html>

<script>
    const headings = document.querySelectorAll("h2, h3, h4, h5, h6");
    const links = document.querySelectorAll("aside a");

    links.forEach((link) => {
        link.addEventListener("click", () => {
            links.forEach((ll) => ll.classList.remove("active"));
            link.classList.add("active");
        })
    })

    window.onscroll = () => {
        let current;
        headings.forEach(h =>  {
            if(h.getBoundingClientRect().top <= 100){
                current = h.id;
            }
        });

        links.forEach(link =>  {
            if(link.dataset.slug === current){
                link.classList.add("active");
            }
            else {
                link.classList.remove("active");
            }
        });
    }
</script>

<style>
    html {
        scroll-padding-top: 5rem;
    }

    .active {
        border-color: var(--active);
        color: var(--active);
    }

    main{
        display: grid;
        gap: 4rem;
        grid-template-columns: 20% 3fr 1fr;
        width: 100%;
        margin: auto;
        position: relative;
    }

    .slot {
        padding-top: 6rem;
        padding-bottom: 2rem;
    }

    .slot details {
        padding: 1rem;
        border: var(--code-border);
    }

    .slot summary {
        user-select: none;
    }

    aside {
        position: relative;
        height: 100%;
        padding-top: 6rem;
    }

    aside nav {
        position: fixed;
    }

    aside nav ul {
        list-style: none;
        width: 100%;
        padding: 0;
    }

    aside nav ul li {
        width: 100%;
    }

    aside nav ul li a {
        text-decoration: none;
        color: var(--text);
        border-left: 4px solid gray;
    }

    aside nav ul li a:hover {
        color: var(--active);
        border-color: var(--active);
    }

    #previous-next {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 2rem;
        margin-top: 5rem;
        width: 100%;
    }

    #previous-next > a {
        display: flex;
        align-items: center;
        gap: 1rem;
        border: 2px solid var(--button-border);
        padding: 0.5rem 1rem;
        min-width: 30%;
        flex-grow: 1;
        border-radius: 4px;
        text-decoration: none;
        color: var(--text);
    }

    #previous-next > a:hover {
        border-color: var(--active);
        text-decoration: underline;
        text-decoration-color: var(--active);
        text-decoration-thickness: 2px;
        --arrow-stroke: var(--active);
    }

    #next {
        flex-direction: row-reverse;
    }

    #previous-next svg {
        max-width: 3rem;
    }

    #previous-next p {
        font-size: initial;
    }

    #previous-next h3 {
        font-size: 1.25rem;
    }

    @media (max-width: 480px) {
        html {
            scroll-padding-top: 0;
        }

        main{
            display: block;
            padding-inline: 1.5rem;
        }

        aside {
            display: none;
        }

        .slot {
            padding-top: 4rem;
        }
    }
</style>